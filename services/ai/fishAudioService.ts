import Constants from 'expo-constants';

/**
 * Fish Audio API Service
 * 
 * Provides text-to-speech (TTS) capabilities using the Fish Audio API.
 * This service converts text messages (generated by Claude AI) into natural-sounding speech.
 * 
 * Integration with claudeService.ts:
 * - Claude generates witty sleep messages ‚Üí Fish Audio converts to speech
 * - Claude generates dream snippets ‚Üí Fish Audio narrates them
 * - Claude generates roasts/affirmations ‚Üí Fish Audio delivers with personality
 * 
 * Example flow:
 * 1. claudeService.generateSleepMessage() ‚Üí "Ewe nailed it! 9 hours of sleep! üêë"
 * 2. fishAudioService.generateSpeech() ‚Üí Converts to audio URL
 * 3. audioPlayer.playAudioFromUrl() ‚Üí Plays the audio
 * 
 * Documentation: https://fish.audio/docs/api/
 */

interface FishAudioOptions {
  text: string;
  voiceId?: string; // Fish Audio voice ID (default: use Shleepy's voice)
  speed?: number; // Speech speed (0.5 to 2.0, default: 1.0)
  emotion?: string; // Emotion tag (e.g., "happy", "sad", "excited")
  format?: 'mp3' | 'wav' | 'opus'; // Audio format (default: mp3)
}

interface FishAudioResponse {
  audioUrl: string;
  duration: number; // Duration in seconds
  voiceId: string;
}

interface FishAudioError {
  error: string;
  code: string;
  message: string;
}

// Exponential backoff state for rate limiting
let retryCount = 0;
const MAX_RETRIES = 3;
const BASE_DELAY_MS = 1000;

/**
 * Get Fish Audio API key from environment variables
 */
function getApiKey(): string {
  const apiKey =
    process.env.EXPO_PUBLIC_FISH_AUDIO_API_KEY ||
    Constants.expoConfig?.extra?.fishAudioApiKey;

  if (!apiKey) {
    throw new Error(
      'Fish Audio API key not found. Please set EXPO_PUBLIC_FISH_AUDIO_API_KEY in your .env file.'
    );
  }

  return apiKey;
}

/**
 * Calculate exponential backoff delay
 */
function getBackoffDelay(attempt: number): number {
  return BASE_DELAY_MS * Math.pow(2, attempt);
}

/**
 * Sleep utility for retry delays
 */
function sleep(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/**
 * Generate speech from text using Fish Audio API
 * 
 * @param options - Text and voice configuration
 * @returns Promise with audio URL and metadata
 * 
 * Example usage:
 * ```typescript
 * const result = await fishAudioService.generateSpeech({
 *   text: "Ewe nailed it! Great sleep!",
 *   voiceId: "shleepy-voice-001",
 *   speed: 1.1,
 *   emotion: "excited"
 * });
 * 
 * await audioPlayer.playAudioFromUrl(result.audioUrl);
 * ```
 */
export async function generateSpeech(
  options: FishAudioOptions
): Promise<FishAudioResponse> {
  const apiKey = getApiKey();

  // Validate inputs
  if (!options.text || options.text.trim().length === 0) {
    throw new Error('Text cannot be empty');
  }

  if (options.speed && (options.speed < 0.5 || options.speed > 2.0)) {
    throw new Error('Speed must be between 0.5 and 2.0');
  }

  // Prepare request body
  const requestBody = {
    text: options.text,
    voice_id: options.voiceId || 'default', // TODO: Replace with Shleepy's voice ID
    speed: options.speed || 1.0,
    emotion: options.emotion,
    format: options.format || 'mp3',
  };

  try {
    // Make API request
    const response = await fetch('https://api.fish.audio/v1/tts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
      },
      body: JSON.stringify(requestBody),
    });

    // Handle non-OK responses
    if (!response.ok) {
      const errorData: FishAudioError = await response.json();
      return handleApiError(response.status, errorData, options);
    }

    // Parse success response
    const data = await response.json();

    // Reset retry count on success
    retryCount = 0;

    return {
      audioUrl: data.audio_url || data.url,
      duration: data.duration || 0,
      voiceId: data.voice_id || options.voiceId || 'default',
    };
  } catch (error) {
    console.error('Fish Audio API error:', error);
    throw new Error(
      'Failed to generate speech. Please check your internet connection and try again.'
    );
  }
}

/**
 * Handle API errors with appropriate user-friendly messages and retry logic
 */
async function handleApiError(
  statusCode: number,
  errorData: FishAudioError,
  originalOptions: FishAudioOptions
): Promise<FishAudioResponse> {
  // 429 - Rate limit (retry with exponential backoff)
  if (statusCode === 429) {
    if (retryCount < MAX_RETRIES) {
      const delay = getBackoffDelay(retryCount);
      retryCount++;

      console.warn(
        `Rate limited. Retrying in ${delay}ms (attempt ${retryCount}/${MAX_RETRIES})...`
      );

      await sleep(delay);
      return generateSpeech(originalOptions); // Retry
    } else {
      retryCount = 0; // Reset for next request
      throw new Error(
        'Fish Audio is temporarily busy. Please try again in a moment! üêë'
      );
    }
  }

  // 402 - Payment required (no credits)
  if (statusCode === 402) {
    throw new Error(
      'Shleepy is out of vocal energy! üêëüí§ (Fish Audio credits depleted)'
    );
  }

  // 401 - Unauthorized (invalid API key)
  if (statusCode === 401) {
    throw new Error(
      'Fish Audio API key is invalid. Please check your configuration.'
    );
  }

  // 400 - Bad request
  if (statusCode === 400) {
    throw new Error(
      errorData.message || 'Invalid request to Fish Audio API.'
    );
  }

  // Generic error
  throw new Error(
    errorData.message ||
      `Fish Audio API error (${statusCode}). Please try again later.`
  );
}

/**
 * Generate speech with fallback to text display
 * 
 * This is a safe wrapper that won't crash the app if Fish Audio fails.
 * Use this in production code where audio is optional.
 * 
 * @param text - Text to convert to speech
 * @param options - Optional voice configuration
 * @returns Promise with audio URL or null if failed
 * 
 * Example usage:
 * ```typescript
 * const audioUrl = await generateSpeechSafe(message);
 * if (audioUrl) {
 *   await audioPlayer.playAudioFromUrl(audioUrl);
 * } else {
 *   // Fallback: Just show text message
 *   showTextMessage(message);
 * }
 * ```
 */
export async function generateSpeechSafe(
  text: string,
  options?: Partial<FishAudioOptions>
): Promise<string | null> {
  try {
    const result = await generateSpeech({ text, ...options });
    return result.audioUrl;
  } catch (error) {
    console.error('Fish Audio generation failed, falling back to text:', error);
    return null; // Return null to indicate fallback to text
  }
}

/**
 * Integration helper: Convert Claude message to speech
 * 
 * This combines claudeService and fishAudioService in one convenient function.
 * 
 * @param claudeMessage - Text message from Claude AI
 * @param voiceConfig - Optional voice customization
 * @returns Promise with audio URL
 * 
 * Example usage in sleep-log.tsx:
 * ```typescript
 * // After user logs sleep:
 * const context = buildShleepyContext(user, sleepDuration);
 * const message = await claudeService.generateSleepMessage(context);
 * const audioUrl = await fishAudioService.claudeToSpeech(message, {
 *   emotion: sleepQuality === 'perfect' ? 'excited' : 'neutral'
 * });
 * await audioPlayer.playAudioFromUrl(audioUrl);
 * ```
 */
export async function claudeToSpeech(
  claudeMessage: string,
  voiceConfig?: Partial<FishAudioOptions>
): Promise<string> {
  // Remove emojis for cleaner speech (Fish Audio might not handle them well)
  const cleanedText = claudeMessage.replace(
    /[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F700}-\u{1F77F}\u{1F780}-\u{1F7FF}\u{1F800}-\u{1F8FF}\u{1F900}-\u{1F9FF}\u{1FA00}-\u{1FA6F}\u{1FA70}-\u{1FAFF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu,
    ''
  ).trim();

  const result = await generateSpeech({
    text: cleanedText,
    ...voiceConfig,
  });

  return result.audioUrl;
}

/**
 * TODO: Future enhancements
 * 
 * 1. Audio caching:
 *    - Cache generated audio files locally to avoid redundant API calls
 *    - Store common phrases (e.g., "Good morning!" "Great sleep!")
 *    - Use AsyncStorage or expo-file-system for persistent cache
 * 
 * 2. Voice customization:
 *    - Allow users to select different Shleepy voices
 *    - Store user's preferred voice in gameStore
 *    - Voice presets: "Gentle Shleepy", "Sassy Shleepy", "Energetic Shleepy"
 * 
 * 3. Emotion detection:
 *    - Analyze Claude's message sentiment
 *    - Automatically set emotion parameter based on message tone
 *    - Map sleep quality to emotions (perfect ‚Üí excited, poor ‚Üí disappointed)
 * 
 * 4. Batch generation:
 *    - Pre-generate common alarm messages at night
 *    - Store them for offline morning playback
 *    - Reduces API latency at critical wake-up moment
 * 
 * 5. Streaming audio:
 *    - Investigate Fish Audio streaming API (if available)
 *    - Start playback before full generation completes
 *    - Improves perceived performance
 */

/**
 * Example integration points in existing codebase:
 * 
 * 1. Sleep Log Screen (app/sleep-log.tsx):
 *    When user wakes up and ends sleep session:
 *    ```
 *    const message = await claudeService.generateSleepMessage(context);
 *    const audioUrl = await fishAudioService.claudeToSpeech(message);
 *    await audioPlayer.playAudioFromUrl(audioUrl);
 *    ```
 * 
 * 2. Home Screen (app/(tabs)/index.tsx):
 *    Daily greeting with voice:
 *    ```
 *    const greeting = await claudeService.sendMessage("Generate morning greeting");
 *    const audioUrl = await fishAudioService.generateSpeechSafe(greeting);
 *    if (audioUrl) await audioPlayer.playAudioFromUrl(audioUrl);
 *    ```
 * 
 * 3. Alarm Service (future /services/alarms/alarmService.ts):
 *    Wake-up alarm with personalized message:
 *    ```
 *    const wakeUpMessage = await claudeService.sendMessage("Generate wake up message");
 *    const audioUrl = await fishAudioService.claudeToSpeech(wakeUpMessage, {
 *      speed: 1.2,
 *      emotion: 'excited'
 *    });
 *    await audioPlayer.playAudioFromUrl(audioUrl);
 *    ```
 * 
 * 4. Dream Narration (app/sleep-log.tsx):
 *    After logging good sleep:
 *    ```
 *    const dream = await claudeService.generateDream('perfect');
 *    const audioUrl = await fishAudioService.claudeToSpeech(dream, {
 *      speed: 0.9, // Slower, dreamier
 *      emotion: 'calm'
 *    });
 *    ```
 */

